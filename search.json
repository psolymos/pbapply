[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Solymos. Author, maintainer. Zygmunt Zawadzki. Author. Henrik Bengtsson. Contributor. R Core Team. Copyright holder, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Solymos P, Zawadzki Z (2023). pbapply: Adding Progress Bar '*apply' Functions. R package version 1.7-0, https://github.com/psolymos/pbapply.","code":"@Manual{,   title = {pbapply: Adding Progress Bar to '*apply' Functions},   author = {Peter Solymos and Zygmunt Zawadzki},   year = {2023},   note = {R package version 1.7-0},   url = {https://github.com/psolymos/pbapply}, }"},{"path":"/index.html","id":"pbapply-adding-progress-bar-to-apply-functions-in-r","dir":"","previous_headings":"","what":"Adding Progress Bar to *apply Functions","title":"Adding Progress Bar to *apply Functions","text":"lightweight package adds progress bar vectorized R functions (*apply). implementation can easily added functions showing progress useful (e.g. bootstrap). type style progress bar (percentages remaining time) can set options. package supports several parallel processing backends, snow-type clusters, multicore-type forking, future.  Versions 1. yet R user 2. R user haven’t used vectorized functions yet 3. R user familiar vectorized functions 4. seasoned R developer writing packages 1. Suggests: pbapply 2. Depends/Imports: pbapply Customizing progress bar package Suppressing progress bar functions Working future backend Command line usage Parallel backends Progress Shiny","code":""},{"path":"/index.html","id":"versions","dir":"","previous_headings":"","what":"Versions","title":"Adding Progress Bar to *apply Functions","text":"Install CRAN release version (recommended): Development version: See user-visible changes NEWS file. Use issue tracker report problem, suggest new feature.","code":"install.packages(\"pbapply\") install.packages(\"pbapply\", repos = \"https://psolymos.r-universe.dev\")"},{"path":[]},{"path":"/index.html","id":"id_1-you-are-not-yet-an-r-user","dir":"","previous_headings":"How to get started?","what":"1. You are not yet an R user","title":"Adding Progress Bar to *apply Functions","text":"case, start understanding basic programming concepts, data structures (matrices, data frames, indexing ), loops functions R. online version Garrett Grolemund’s Hands-Programming R walks concepts nicely.","code":""},{"path":"/index.html","id":"id_2-you-are-an-r-user-but-havent-used-vectorized-functions-yet","dir":"","previous_headings":"How to get started?","what":"2. You are an R user but haven’t used vectorized functions yet","title":"Adding Progress Bar to *apply Functions","text":"Learn vectorized functions designed replace loops: lapply, sapply, apply. repository called Road Progress created show go loop lapply/sapply.","code":""},{"path":"/index.html","id":"id_3-you-are-an-r-user-familiar-with-vectorized-functions","dir":"","previous_headings":"How to get started?","what":"3. You are an R user familiar with vectorized functions","title":"Adding Progress Bar to *apply Functions","text":"case, can simply add pbapply::pb *apply functions, e.g. apply() become pbapply::pbapply(), etc. can guess happens. Now want speed things little (lot), try pbapply::pbapply(..., cl = 4) use 4 cores instead 1. Windows user, things get bit complicated, much. Check work parallel::parLapply set snow type cluster use suitable future backend (see examples ). look Road Progress repository see worked examples.","code":""},{"path":"/index.html","id":"id_4-you-are-a-seasoned-r-developer-writing-your-own-packages","dir":"","previous_headings":"How to get started?","what":"4. You are a seasoned R developer writing your own packages","title":"Adding Progress Bar to *apply Functions","text":"Read , next section .","code":""},{"path":"/index.html","id":"how-to-add-pbapply-to-a-package","dir":"","previous_headings":"","what":"How to add pbapply to a package","title":"Adding Progress Bar to *apply Functions","text":"two ways adding pbapply package another package.","code":""},{"path":"/index.html","id":"id_1-suggests-pbapply","dir":"","previous_headings":"How to add pbapply to a package","what":"1. Suggests: pbapply","title":"Adding Progress Bar to *apply Functions","text":"Add pbapply Suggests field DESCRIPTION. Use conditional statement code fall back base function case pbapply installed: See small example package .","code":"out <- if (requireNamespace(\"pbapply\", quietly = TRUE)) {    pbapply::pblapply(X, FUN, ...) } else {    lapply(X, FUN, ...) }"},{"path":"/index.html","id":"id_2-dependsimports-pbapply","dir":"","previous_headings":"How to add pbapply to a package","what":"2. Depends/Imports: pbapply","title":"Adding Progress Bar to *apply Functions","text":"Add pbapply Depends Imports field DESCRIPTION. Use pbapply functions either pbapply::pblapply() specify NAMESPACE (importFrom(pbapply, pblapply)) use pblapply() (without ::). ’d add comment #' @importFrom pbapply pblapply using roxygen2.","code":""},{"path":"/index.html","id":"customizing-the-progress-bar-in-your-package","dir":"","previous_headings":"How to add pbapply to a package","what":"Customizing the progress bar in your package","title":"Adding Progress Bar to *apply Functions","text":"Specify progress bar options zzz.R file package: set options pbapply override loaded. See small example package .","code":".onAttach <- function(libname, pkgname){     options(\"pboptions\" = list(         type = if (interactive()) \"timer\" else \"none\",         char = \"-\",         txt.width = 50,         gui.width = 300,         style = 3,         initial = 0,         title = \"R progress bar\",         label = \"\",         nout = 100L,         min_time = 2))     invisible(NULL) }"},{"path":"/index.html","id":"suppressing-the-progress-bar-in-your-functions","dir":"","previous_headings":"How to add pbapply to a package","what":"Suppressing the progress bar in your functions","title":"Adding Progress Bar to *apply Functions","text":"Suppressing progress bar sometimes handy. default, progress bar suppressed !interactive(). instances, put inside function:","code":"pbo <- pboptions(type = \"none\") on.exit(pboptions(pbo), add = TRUE)"},{"path":"/index.html","id":"working-with-a-future-backend","dir":"","previous_headings":"How to add pbapply to a package","what":"Working with a future backend","title":"Adding Progress Bar to *apply Functions","text":"future backend might require additional arguments set package developers avoid warnings end users. notably, determine handle random number generation part parallel evaluation. can pass future.seed argument directly .... general, ass additional arguments FUN immediately following FUN argument, additional arguments future backend cl = \"future\" statement: See issue discussion.","code":"pblapply(1:2, FUN = my_fcn, {additional my_fcn args}, cl = \"future\", {additional future args})"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Adding Progress Bar to *apply Functions","text":"following pb* functions available pbapply package:","code":""},{"path":"/index.html","id":"command-line-usage","dir":"","previous_headings":"Examples","what":"Command line usage","title":"Adding Progress Bar to *apply Functions","text":"","code":"library(pbapply) set.seed(1234) n <- 2000 x <- rnorm(n) y <- rnorm(n, model.matrix(~x) %*% c(0,1), sd=0.5) d <- data.frame(y, x) ## model fitting and bootstrap mod <- lm(y~x, d) ndat <- model.frame(mod) B <- 500 bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE)) fun <- function(z) {     if (missing(z))         z <- sample(nrow(ndat), nrow(ndat), TRUE)     coef(lm(mod$call$formula, data=ndat[z,])) }  ## standard '*apply' functions # system.time(res1 <- lapply(1:B, function(i) fun(bid[,i]))) #    user  system elapsed #   1.096   0.023   1.127 system.time(res2 <- sapply(1:B, function(i) fun(bid[,i]))) #    user  system elapsed #   1.152   0.017   1.182 system.time(res3 <- apply(bid, 2, fun)) #    user  system elapsed #   1.134   0.010   1.160 system.time(res4 <- replicate(B, fun())) #    user  system elapsed #   1.141   0.022   1.171  ## 'pb*apply' functions ## try different settings: ## \"none\", \"txt\", \"tk\", \"win\", \"timer\" op <- pboptions(type=\"timer\") # default system.time(res1pb <- pblapply(1:B, function(i) fun(bid[,i]))) #    |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% ~00s #    user  system elapsed #   1.539   0.046   1.599 pboptions(op)  pboptions(type=\"txt\") system.time(res2pb <- pbsapply(1:B, function(i) fun(bid[,i]))) #   |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% #    user  system elapsed #   1.433   0.045   1.518 pboptions(op)  pboptions(type=\"txt\", style=1, char=\"=\") system.time(res3pb <- pbapply(bid, 2, fun)) # ================================================== #    user  system elapsed #   1.389   0.032   1.464 pboptions(op)  pboptions(type=\"txt\", char=\":\") system.time(res4pb <- pbreplicate(B, fun())) #   |::::::::::::::::::::::::::::::::::::::::::::::::::| 100% #    user  system elapsed #   1.427   0.040   1.481 pboptions(op)"},{"path":"/index.html","id":"parallel-backends","dir":"","previous_headings":"Examples","what":"Parallel backends","title":"Adding Progress Bar to *apply Functions","text":"different options choose backend. comes cl argument pb* functions. cl = NULL (default): sequential execution cl class cluster: implies used cl = parallel::makeCluster(n) something similar (n number worker nodes) cl positive integer (usually > 1): forking type parallelism used case cl = \"future\": using one future plans parallelism defined outside pb* call. Note Windows forking type available pb* functions fall back sequential evaluation. examples:","code":"f <- function(i) Sys.sleep(1)  ## sequential pblapply(1:2, f)  ## cluster cl <- parallel::makeCluster(2) pblapply(1:2, f, cl = cl) parallel::stopCluster(cl)  ## forking pblapply(1:2, f, cl = 2)  ## future library(future)  cl <- parallel::makeCluster(2) plan(cluster, workers = cl) r2 <- pblapply(1:2, f, cl = \"future\") parallel::stopCluster(cl)  plan(multisession, workers = 2) pblapply(1:2, f, cl = \"future\")  plan(sequential)"},{"path":"/index.html","id":"progress-with-shiny","dir":"","previous_headings":"Examples","what":"Progress with Shiny","title":"Adding Progress Bar to *apply Functions","text":"","code":"library(shiny) library(pbapply)  pboptions(     type = \"shiny\",     title = \"Shiny progress\",     label = \"Almost there ...\")  ui <- fluidPage(     plotOutput(\"plot\") )  server <- function(input, output, session) {     output$plot <- renderPlot({         pbsapply(1:15, function(z) Sys.sleep(0.5))         plot(cars)     }) }  shinyApp(ui, server)"},{"path":"/reference/pbapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding Progress Bar to '*apply' Functions — pbapply","title":"Adding Progress Bar to '*apply' Functions — pbapply","text":"Adding progress bar *apply functions, possibly leveraging parallel processing.","code":""},{"path":"/reference/pbapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding Progress Bar to '*apply' Functions — pbapply","text":"","code":"pblapply(X, FUN, ..., cl = NULL) pbeapply(env, FUN, ..., all.names = FALSE, USE.NAMES = TRUE, cl = NULL) pbwalk(X, FUN, ..., cl = NULL)  pbapply(X, MARGIN, FUN, ..., simplify = TRUE, cl = NULL)  pbsapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE, cl = NULL) pbvapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE, cl = NULL) pbreplicate(n, expr, simplify = \"array\", cl = NULL)  pbmapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE) pb.mapply(FUN, dots, MoreArgs) pbMap(f, ...)  pbtapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE, cl = NULL)  pbby(data, INDICES, FUN, ..., simplify = TRUE, cl = NULL)"},{"path":"/reference/pbapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding Progress Bar to '*apply' Functions — pbapply","text":"X pbsapply, pblapply, pbwalk vector (atomic list) expressions vector (objects including classed objects coerced .list.) pbapply array, including matrix. pbtapply R object split method exists. Typically vector-like, allowing subsetting [. MARGIN vector giving subscripts function applied . 1 indicates rows, 2 indicates columns, c(1,2) indicates rows columns. FUN, f function applied element X: see apply, sapply, lapply. case functions like +, %*%, etc., function name must backquoted quoted. FUN NULL, pbtapply returns vector can used subscript multi-way array pbtapply normally produces. ... Optional arguments FUN also underlying functions (e.g. parLapply mclapply cl NULL). dots List arguments vectorize (vectors lists strictly positive length, zero length); see .mapply. env Environment used. FUN.VALUE (generalized) vector; template return value FUN. See 'Details' vapply. simplify, SIMPLIFY Logical; result simplified vector matrix possible? pbtapply returns array mode \"list\" (words, list dim attribute) FALSE; TRUE (default), FUN always returns scalar, pbtapply returns array mode scalar. USE.NAMES Logical; TRUE X character, use X names result unless names already. .names Logical, indicating whether apply function values. n Number replications. expr Expression (language object, usually call) evaluate repeatedly. cl cluster object created makeCluster, integer indicate number child-processes (integer values ignored Windows) parallel evaluations (see Details performance). can also \"future\" use future backend (see Details), NULL (default) refers sequential evaluation. MoreArgs list arguments FUN. INDEX list one factors, length X. elements coerced factors .factor. INDICES factor list factors, length nrow(data). data R object, normally data frame, possibly matrix. default case simplification array, value array initialized array(default, dim = ..). R 3.4.0, hard coded array()'s default NA. NA (default), missing value answer type, e.g. NA_real_, chosen (.raw(0) \"raw\"). numerical case, may set, e.g., FUN(integer(0)), e.g., case FUN = sum 0 0L.","code":""},{"path":"/reference/pbapply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adding Progress Bar to '*apply' Functions — pbapply","text":"behavior progress bar controlled option type pboptions, can take values c(\"txt\", \"win\", \"tk\", \"none\",) Windows, c(\"txt\", \"tk\", \"none\",) Unix systems. options elements arguments used functions timerProgressBar, txtProgressBar, tkProgressBar. See pboptions conveniently set . Parallel processing can enabled cl argument. parLapply called cl 'cluster' object, mclapply called cl integer. Showing progress bar increases communication overhead main process nodes / child processes compared parallel equivalents functions without progress bar. functions fall back original equivalents progress bar disabled (.e. getOption(\"pboptions\")$type == \"none\" dopb() FALSE). default interactive() FALSE (.e. called command line R script). parallel processing, objects might need pushed workers, random numbers must handled care (see Examples). Updating progress bar mclapply can slightly slower compared using Fork cluster (.e. calling makeForkCluster). Care must taken set appropriate random numbers case. Note use_lb option (see pboptions) using load balancing running parallel clusters. using mclapply, ... passes arguments underlying function control. pbwalk similar pblapply calls FUN side-effect returns input X invisibly (behavior modeled `purrr::walk`). Note cl = \"future\", might specify future.seed argument (passed part ...) using random numbers parallel. Note also code prints messages encounter warnings execution, condition messages might cause progress bar break continue new line.","code":""},{"path":"/reference/pbapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding Progress Bar to '*apply' Functions — pbapply","text":"Similar value returned standard *apply functions. progress bar showed side effect.","code":""},{"path":"/reference/pbapply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adding Progress Bar to '*apply' Functions — pbapply","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":"/reference/pbapply.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Adding Progress Bar to '*apply' Functions — pbapply","text":"Progress bar can add overhead computation.","code":""},{"path":[]},{"path":"/reference/pbapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding Progress Bar to '*apply' Functions — pbapply","text":"","code":"## --- simple linear model simulation --- set.seed(1234) n <- 200 x <- rnorm(n) y <- rnorm(n, crossprod(t(model.matrix(~ x)), c(0, 1)), sd = 0.5) d <- data.frame(y, x) ## model fitting and bootstrap mod <- lm(y ~ x, d) ndat <- model.frame(mod) B <- 100 bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE)) fun <- function(z) {     if (missing(z))         z <- sample(nrow(ndat), nrow(ndat), TRUE)     coef(lm(mod$call$formula, data=ndat[z,])) }  ## standard '*apply' functions system.time(res1 <- lapply(1:B, function(i) fun(bid[,i]))) #>    user  system elapsed  #>   0.101   0.006   0.108  system.time(res2 <- sapply(1:B, function(i) fun(bid[,i]))) #>    user  system elapsed  #>   0.096   0.003   0.099  system.time(res3 <- apply(bid, 2, fun)) #>    user  system elapsed  #>   0.098   0.005   0.103  system.time(res4 <- replicate(B, fun())) #>    user  system elapsed  #>   0.101   0.002   0.103   ## 'pb*apply' functions ## try different settings: ## \"none\", \"txt\", \"tk\", \"win\", \"timer\" op <- pboptions(type = \"timer\") # default system.time(res1pb <- pblapply(1:B, function(i) fun(bid[,i]))) #>    |                                                  | 0 % ~calculating     |+                                                 | 1 % ~00s             |+                                                 | 2 % ~00s             |++                                                | 3 % ~00s             |++                                                | 4 % ~00s             |+++                                               | 5 % ~00s             |+++                                               | 6 % ~00s             |++++                                              | 7 % ~00s             |++++                                              | 8 % ~00s             |+++++                                             | 9 % ~00s             |+++++                                             | 10% ~00s             |++++++                                            | 11% ~00s             |++++++                                            | 12% ~00s             |+++++++                                           | 13% ~00s             |+++++++                                           | 14% ~00s             |++++++++                                          | 15% ~00s             |++++++++                                          | 16% ~00s             |+++++++++                                         | 17% ~00s             |+++++++++                                         | 18% ~00s             |++++++++++                                        | 19% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++                                       | 21% ~00s             |+++++++++++                                       | 22% ~00s             |++++++++++++                                      | 23% ~00s             |++++++++++++                                      | 24% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++                                     | 26% ~00s             |++++++++++++++                                    | 27% ~00s             |++++++++++++++                                    | 28% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++                                  | 31% ~00s             |++++++++++++++++                                  | 32% ~00s             |+++++++++++++++++                                 | 33% ~00s             |+++++++++++++++++                                 | 34% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++                                | 36% ~00s             |+++++++++++++++++++                               | 37% ~00s             |+++++++++++++++++++                               | 38% ~00s             |++++++++++++++++++++                              | 39% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++                             | 41% ~00s             |+++++++++++++++++++++                             | 42% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |++++++++++++++++++++++                            | 44% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++                           | 46% ~00s             |++++++++++++++++++++++++                          | 47% ~00s             |++++++++++++++++++++++++                          | 48% ~00s             |+++++++++++++++++++++++++                         | 49% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++                        | 51% ~00s             |++++++++++++++++++++++++++                        | 52% ~00s             |+++++++++++++++++++++++++++                       | 53% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++                      | 56% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |+++++++++++++++++++++++++++++                     | 58% ~00s             |++++++++++++++++++++++++++++++                    | 59% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |+++++++++++++++++++++++++++++++                   | 62% ~00s             |++++++++++++++++++++++++++++++++                  | 63% ~00s             |++++++++++++++++++++++++++++++++                  | 64% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++                 | 66% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |+++++++++++++++++++++++++++++++++++               | 69% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |++++++++++++++++++++++++++++++++++++              | 72% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |+++++++++++++++++++++++++++++++++++++             | 74% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++            | 76% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 77% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 78% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 81% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 84% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 88% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 91% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 92% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 94% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 96% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 97% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 98% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 99% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #>    user  system elapsed  #>   0.112   0.001   0.112  pboptions(op)  pboptions(type = \"txt\") system.time(res2pb <- pbsapply(1:B, function(i) fun(bid[,i]))) #>    |                                                           |                                                  |   0%   |                                                           |                                                  |   1%   |                                                           |+                                                 |   2%   |                                                           |++                                                |   3%   |                                                           |++                                                |   4%   |                                                           |++                                                |   5%   |                                                           |+++                                               |   6%   |                                                           |++++                                              |   7%   |                                                           |++++                                              |   8%   |                                                           |++++                                              |   9%   |                                                           |+++++                                             |  10%   |                                                           |++++++                                            |  11%   |                                                           |++++++                                            |  12%   |                                                           |++++++                                            |  13%   |                                                           |+++++++                                           |  14%   |                                                           |++++++++                                          |  15%   |                                                           |++++++++                                          |  16%   |                                                           |++++++++                                          |  17%   |                                                           |+++++++++                                         |  18%   |                                                           |++++++++++                                        |  19%   |                                                           |++++++++++                                        |  20%   |                                                           |++++++++++                                        |  21%   |                                                           |+++++++++++                                       |  22%   |                                                           |++++++++++++                                      |  23%   |                                                           |++++++++++++                                      |  24%   |                                                           |++++++++++++                                      |  25%   |                                                           |+++++++++++++                                     |  26%   |                                                           |++++++++++++++                                    |  27%   |                                                           |++++++++++++++                                    |  28%   |                                                           |++++++++++++++                                    |  29%   |                                                           |+++++++++++++++                                   |  30%   |                                                           |++++++++++++++++                                  |  31%   |                                                           |++++++++++++++++                                  |  32%   |                                                           |++++++++++++++++                                  |  33%   |                                                           |+++++++++++++++++                                 |  34%   |                                                           |++++++++++++++++++                                |  35%   |                                                           |++++++++++++++++++                                |  36%   |                                                           |++++++++++++++++++                                |  37%   |                                                           |+++++++++++++++++++                               |  38%   |                                                           |++++++++++++++++++++                              |  39%   |                                                           |++++++++++++++++++++                              |  40%   |                                                           |++++++++++++++++++++                              |  41%   |                                                           |+++++++++++++++++++++                             |  42%   |                                                           |++++++++++++++++++++++                            |  43%   |                                                           |++++++++++++++++++++++                            |  44%   |                                                           |++++++++++++++++++++++                            |  45%   |                                                           |+++++++++++++++++++++++                           |  46%   |                                                           |++++++++++++++++++++++++                          |  47%   |                                                           |++++++++++++++++++++++++                          |  48%   |                                                           |++++++++++++++++++++++++                          |  49%   |                                                           |+++++++++++++++++++++++++                         |  50%   |                                                           |++++++++++++++++++++++++++                        |  51%   |                                                           |++++++++++++++++++++++++++                        |  52%   |                                                           |++++++++++++++++++++++++++                        |  53%   |                                                           |+++++++++++++++++++++++++++                       |  54%   |                                                           |++++++++++++++++++++++++++++                      |  55%   |                                                           |++++++++++++++++++++++++++++                      |  56%   |                                                           |++++++++++++++++++++++++++++                      |  57%   |                                                           |+++++++++++++++++++++++++++++                     |  58%   |                                                           |++++++++++++++++++++++++++++++                    |  59%   |                                                           |++++++++++++++++++++++++++++++                    |  60%   |                                                           |++++++++++++++++++++++++++++++                    |  61%   |                                                           |+++++++++++++++++++++++++++++++                   |  62%   |                                                           |++++++++++++++++++++++++++++++++                  |  63%   |                                                           |++++++++++++++++++++++++++++++++                  |  64%   |                                                           |++++++++++++++++++++++++++++++++                  |  65%   |                                                           |+++++++++++++++++++++++++++++++++                 |  66%   |                                                           |++++++++++++++++++++++++++++++++++                |  67%   |                                                           |++++++++++++++++++++++++++++++++++                |  68%   |                                                           |++++++++++++++++++++++++++++++++++                |  69%   |                                                           |+++++++++++++++++++++++++++++++++++               |  70%   |                                                           |++++++++++++++++++++++++++++++++++++              |  71%   |                                                           |++++++++++++++++++++++++++++++++++++              |  72%   |                                                           |++++++++++++++++++++++++++++++++++++              |  73%   |                                                           |+++++++++++++++++++++++++++++++++++++             |  74%   |                                                           |++++++++++++++++++++++++++++++++++++++            |  75%   |                                                           |++++++++++++++++++++++++++++++++++++++            |  76%   |                                                           |++++++++++++++++++++++++++++++++++++++            |  77%   |                                                           |+++++++++++++++++++++++++++++++++++++++           |  78%   |                                                           |++++++++++++++++++++++++++++++++++++++++          |  79%   |                                                           |++++++++++++++++++++++++++++++++++++++++          |  80%   |                                                           |++++++++++++++++++++++++++++++++++++++++          |  81%   |                                                           |+++++++++++++++++++++++++++++++++++++++++         |  82%   |                                                           |++++++++++++++++++++++++++++++++++++++++++        |  83%   |                                                           |++++++++++++++++++++++++++++++++++++++++++        |  84%   |                                                           |++++++++++++++++++++++++++++++++++++++++++        |  85%   |                                                           |+++++++++++++++++++++++++++++++++++++++++++       |  86%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++      |  87%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++      |  88%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++      |  89%   |                                                           |+++++++++++++++++++++++++++++++++++++++++++++     |  90%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++++    |  91%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++++    |  92%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++++    |  93%   |                                                           |+++++++++++++++++++++++++++++++++++++++++++++++   |  94%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++++++  |  95%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++++++  |  96%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++++++  |  97%   |                                                           |+++++++++++++++++++++++++++++++++++++++++++++++++ |  98%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++++++++|  99%   |                                                           |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% #>    user  system elapsed  #>   0.109   0.001   0.109  pboptions(op)  pboptions(type = \"txt\", style = 1, char = \"=\") system.time(res3pb <- pbapply(bid, 2, fun)) #> ================================================== #>    user  system elapsed  #>   0.104   0.003   0.107  pboptions(op)  pboptions(type = \"txt\", char = \":\") system.time(res4pb <- pbreplicate(B, fun())) #>    |                                                           |                                                  |   0%   |                                                           |                                                  |   1%   |                                                           |:                                                 |   2%   |                                                           |::                                                |   3%   |                                                           |::                                                |   4%   |                                                           |::                                                |   5%   |                                                           |:::                                               |   6%   |                                                           |::::                                              |   7%   |                                                           |::::                                              |   8%   |                                                           |::::                                              |   9%   |                                                           |:::::                                             |  10%   |                                                           |::::::                                            |  11%   |                                                           |::::::                                            |  12%   |                                                           |::::::                                            |  13%   |                                                           |:::::::                                           |  14%   |                                                           |::::::::                                          |  15%   |                                                           |::::::::                                          |  16%   |                                                           |::::::::                                          |  17%   |                                                           |:::::::::                                         |  18%   |                                                           |::::::::::                                        |  19%   |                                                           |::::::::::                                        |  20%   |                                                           |::::::::::                                        |  21%   |                                                           |:::::::::::                                       |  22%   |                                                           |::::::::::::                                      |  23%   |                                                           |::::::::::::                                      |  24%   |                                                           |::::::::::::                                      |  25%   |                                                           |:::::::::::::                                     |  26%   |                                                           |::::::::::::::                                    |  27%   |                                                           |::::::::::::::                                    |  28%   |                                                           |::::::::::::::                                    |  29%   |                                                           |:::::::::::::::                                   |  30%   |                                                           |::::::::::::::::                                  |  31%   |                                                           |::::::::::::::::                                  |  32%   |                                                           |::::::::::::::::                                  |  33%   |                                                           |:::::::::::::::::                                 |  34%   |                                                           |::::::::::::::::::                                |  35%   |                                                           |::::::::::::::::::                                |  36%   |                                                           |::::::::::::::::::                                |  37%   |                                                           |:::::::::::::::::::                               |  38%   |                                                           |::::::::::::::::::::                              |  39%   |                                                           |::::::::::::::::::::                              |  40%   |                                                           |::::::::::::::::::::                              |  41%   |                                                           |:::::::::::::::::::::                             |  42%   |                                                           |::::::::::::::::::::::                            |  43%   |                                                           |::::::::::::::::::::::                            |  44%   |                                                           |::::::::::::::::::::::                            |  45%   |                                                           |:::::::::::::::::::::::                           |  46%   |                                                           |::::::::::::::::::::::::                          |  47%   |                                                           |::::::::::::::::::::::::                          |  48%   |                                                           |::::::::::::::::::::::::                          |  49%   |                                                           |:::::::::::::::::::::::::                         |  50%   |                                                           |::::::::::::::::::::::::::                        |  51%   |                                                           |::::::::::::::::::::::::::                        |  52%   |                                                           |::::::::::::::::::::::::::                        |  53%   |                                                           |:::::::::::::::::::::::::::                       |  54%   |                                                           |::::::::::::::::::::::::::::                      |  55%   |                                                           |::::::::::::::::::::::::::::                      |  56%   |                                                           |::::::::::::::::::::::::::::                      |  57%   |                                                           |:::::::::::::::::::::::::::::                     |  58%   |                                                           |::::::::::::::::::::::::::::::                    |  59%   |                                                           |::::::::::::::::::::::::::::::                    |  60%   |                                                           |::::::::::::::::::::::::::::::                    |  61%   |                                                           |:::::::::::::::::::::::::::::::                   |  62%   |                                                           |::::::::::::::::::::::::::::::::                  |  63%   |                                                           |::::::::::::::::::::::::::::::::                  |  64%   |                                                           |::::::::::::::::::::::::::::::::                  |  65%   |                                                           |:::::::::::::::::::::::::::::::::                 |  66%   |                                                           |::::::::::::::::::::::::::::::::::                |  67%   |                                                           |::::::::::::::::::::::::::::::::::                |  68%   |                                                           |::::::::::::::::::::::::::::::::::                |  69%   |                                                           |:::::::::::::::::::::::::::::::::::               |  70%   |                                                           |::::::::::::::::::::::::::::::::::::              |  71%   |                                                           |::::::::::::::::::::::::::::::::::::              |  72%   |                                                           |::::::::::::::::::::::::::::::::::::              |  73%   |                                                           |:::::::::::::::::::::::::::::::::::::             |  74%   |                                                           |::::::::::::::::::::::::::::::::::::::            |  75%   |                                                           |::::::::::::::::::::::::::::::::::::::            |  76%   |                                                           |::::::::::::::::::::::::::::::::::::::            |  77%   |                                                           |:::::::::::::::::::::::::::::::::::::::           |  78%   |                                                           |::::::::::::::::::::::::::::::::::::::::          |  79%   |                                                           |::::::::::::::::::::::::::::::::::::::::          |  80%   |                                                           |::::::::::::::::::::::::::::::::::::::::          |  81%   |                                                           |:::::::::::::::::::::::::::::::::::::::::         |  82%   |                                                           |::::::::::::::::::::::::::::::::::::::::::        |  83%   |                                                           |::::::::::::::::::::::::::::::::::::::::::        |  84%   |                                                           |::::::::::::::::::::::::::::::::::::::::::        |  85%   |                                                           |:::::::::::::::::::::::::::::::::::::::::::       |  86%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::      |  87%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::      |  88%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::      |  89%   |                                                           |:::::::::::::::::::::::::::::::::::::::::::::     |  90%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::    |  91%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::    |  92%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::    |  93%   |                                                           |:::::::::::::::::::::::::::::::::::::::::::::::   |  94%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::::  |  95%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::::  |  96%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::::  |  97%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::::: |  98%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::::::|  99%   |                                                           |::::::::::::::::::::::::::::::::::::::::::::::::::| 100% #>    user  system elapsed  #>   0.112   0.000   0.112  pboptions(op)  if (FALSE) { ## parallel evaluation using the parallel package ## (n = 2000 and B = 1000 will give visible timing differences)  library(parallel) cl <- makeCluster(2L) clusterExport(cl, c(\"fun\", \"mod\", \"ndat\", \"bid\"))  ## parallel with no progress bar: snow type cluster ## (RNG is set in the main process to define the object bid) system.time(res1cl <- parLapply(cl = cl, 1:B, function(i) fun(bid[,i]))) system.time(res2cl <- parSapply(cl = cl, 1:B, function(i) fun(bid[,i]))) system.time(res3cl <- parApply(cl, bid, 2, fun))  ## parallel with  progress bar: snow type cluster ## (RNG is set in the main process to define the object bid) system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = cl)) system.time(res2pbcl <- pbsapply(1:B, function(i) fun(bid[,i]), cl = cl)) ## (RNG needs to be set when not using bid) parallel::clusterSetRNGStream(cl, iseed = 0L) system.time(res4pbcl <- pbreplicate(B, fun(), cl = cl)) system.time(res3pbcl <- pbapply(bid, 2, fun, cl = cl))  stopCluster(cl)  if (.Platform$OS.type != \"windows\") {     ## parallel with no progress bar: multicore type forking     ## (mc.set.seed = TRUE in parallel::mclapply by default)     system.time(res2mc <- mclapply(1:B, function(i) fun(bid[,i]), mc.cores = 2L))     ## parallel with  progress bar: multicore type forking     ## (mc.set.seed = TRUE in parallel::mclapply by default)     system.time(res1pbmc <- pblapply(1:B, function(i) fun(bid[,i]), cl = 2L))     system.time(res2pbmc <- pbsapply(1:B, function(i) fun(bid[,i]), cl = 2L))     system.time(res4pbmc <- pbreplicate(B, fun(), cl = 2L)) } }  ## --- Examples taken from standard '*apply' functions ---  ## --- sapply, lapply, and replicate ---  require(stats); require(graphics)  x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE)) # compute the list mean for each list element pblapply(x, mean) #> $a #> [1] 5.5 #>  #> $beta #> [1] 4.535125 #>  #> $logic #> [1] 0.5 #>  pbwalk(x, mean) # median and quartiles for each list element pblapply(x, quantile, probs = 1:3/4) #> $a #>  25%  50%  75%  #> 3.25 5.50 7.75  #>  #> $beta #>       25%       50%       75%  #> 0.2516074 1.0000000 5.0536690  #>  #> $logic #> 25% 50% 75%  #> 0.0 0.5 1.0  #>  pbsapply(x, quantile) #>          a        beta logic #> 0%    1.00  0.04978707   0.0 #> 25%   3.25  0.25160736   0.0 #> 50%   5.50  1.00000000   0.5 #> 75%   7.75  5.05366896   1.0 #> 100% 10.00 20.08553692   1.0 i39 <- sapply(3:9, seq) # list of vectors pbsapply(i39, fivenum) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]  1.0  1.0    1  1.0  1.0  1.0    1 #> [2,]  1.5  1.5    2  2.0  2.5  2.5    3 #> [3,]  2.0  2.5    3  3.5  4.0  4.5    5 #> [4,]  2.5  3.5    4  5.0  5.5  6.5    7 #> [5,]  3.0  4.0    5  6.0  7.0  8.0    9 pbvapply(i39, fivenum,        c(Min. = 0, \"1st Qu.\" = 0, Median = 0, \"3rd Qu.\" = 0, Max. = 0)) #>         [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> Min.     1.0  1.0    1  1.0  1.0  1.0    1 #> 1st Qu.  1.5  1.5    2  2.0  2.5  2.5    3 #> Median   2.0  2.5    3  3.5  4.0  4.5    5 #> 3rd Qu.  2.5  3.5    4  5.0  5.5  6.5    7 #> Max.     3.0  4.0    5  6.0  7.0  8.0    9  ## sapply(*, \"array\") -- artificial example (v <- structure(10*(5:8), names = LETTERS[1:4])) #>  A  B  C  D  #> 50 60 70 80  f2 <- function(x, y) outer(rep(x, length.out = 3), y) (a2 <- pbsapply(v, f2, y = 2*(1:5), simplify = \"array\")) #> , , A #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  100  200  300  400  500 #> [2,]  100  200  300  400  500 #> [3,]  100  200  300  400  500 #>  #> , , B #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  120  240  360  480  600 #> [2,]  120  240  360  480  600 #> [3,]  120  240  360  480  600 #>  #> , , C #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  140  280  420  560  700 #> [2,]  140  280  420  560  700 #> [3,]  140  280  420  560  700 #>  #> , , D #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  160  320  480  640  800 #> [2,]  160  320  480  640  800 #> [3,]  160  320  480  640  800 #>  a.2 <- pbvapply(v, f2, outer(1:3, 1:5), y = 2*(1:5)) stopifnot(dim(a2) == c(3,5,4), all.equal(a2, a.2),           identical(dimnames(a2), list(NULL,NULL,LETTERS[1:4])))  summary(pbreplicate(100, mean(rexp(10)))) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.4786  0.7273  0.9091  0.9666  1.1917  2.3021   ## use of replicate() with parameters: foo <- function(x = 1, y = 2) c(x, y) # does not work: bar <- function(n, ...) replicate(n, foo(...)) bar <- function(n, x) pbreplicate(n, foo(x = x)) bar(5, x = 3) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    3    3    3    3 #> [2,]    2    2    2    2    2  ## --- apply ---  ## Compute row and column sums for a matrix: x <- cbind(x1 = 3, x2 = c(4:1, 2:5)) dimnames(x)[[1]] <- letters[1:8] pbapply(x, 2, mean, trim = .2) #> x1 x2  #>  3  3  col.sums <- pbapply(x, 2, sum) row.sums <- pbapply(x, 1, sum) rbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums))) #>      x1 x2 Rtot #> a     3  4    7 #> b     3  3    6 #> c     3  2    5 #> d     3  1    4 #> e     3  2    5 #> f     3  3    6 #> g     3  4    7 #> h     3  5    8 #> Ctot 24 24   48  stopifnot( pbapply(x, 2, is.vector))  ## Sort the columns of a matrix pbapply(x, 2, sort) #>      x1 x2 #> [1,]  3  1 #> [2,]  3  2 #> [3,]  3  2 #> [4,]  3  3 #> [5,]  3  3 #> [6,]  3  4 #> [7,]  3  4 #> [8,]  3  5  ## keeping named dimnames names(dimnames(x)) <- c(\"row\", \"col\") x3 <- array(x, dim = c(dim(x),3),       dimnames = c(dimnames(x), list(C = paste0(\"cop.\",1:3)))) identical(x,  pbapply( x,  2,  identity)) #> [1] TRUE identical(x3, pbapply(x3, 2:3, identity)) #> [1] TRUE  ##- function with extra args: cave <- function(x, c1, c2) c(mean(x[c1]), mean(x[c2])) pbapply(x, 1, cave,  c1 = \"x1\", c2 = c(\"x1\",\"x2\")) #>       row #>          a b   c d   e f   g h #>   [1,] 3.0 3 3.0 3 3.0 3 3.0 3 #>   [2,] 3.5 3 2.5 2 2.5 3 3.5 4  ma <- matrix(c(1:4, 1, 6:8), nrow = 2) ma #>      [,1] [,2] [,3] [,4] #> [1,]    1    3    1    7 #> [2,]    2    4    6    8 pbapply(ma, 1, table)  #--> a list of length 2 #> [[1]] #>  #> 1 3 7  #> 2 1 1  #>  #> [[2]] #>  #> 2 4 6 8  #> 1 1 1 1  #>  pbapply(ma, 1, stats::quantile) # 5 x n matrix with rownames #>      [,1] [,2] #> 0%      1  2.0 #> 25%     1  3.5 #> 50%     2  5.0 #> 75%     4  6.5 #> 100%    7  8.0  stopifnot(dim(ma) == dim(pbapply(ma, 1:2, sum)))  ## Example with different lengths for each call z <- array(1:24, dim = 2:4) zseq <- pbapply(z, 1:2, function(x) seq_len(max(x))) zseq         ## a 2 x 3 matrix #>      [,1]       [,2]       [,3]       #> [1,] integer,19 integer,21 integer,23 #> [2,] integer,20 integer,22 integer,24 typeof(zseq) ## list #> [1] \"list\" dim(zseq) ## 2 3 #> [1] 2 3 zseq[1,] #> [[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 #>  #> [[2]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 #>  #> [[3]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #>  pbapply(z, 3, function(x) seq_len(max(x))) #> [[1]] #> [1] 1 2 3 4 5 6 #>  #> [[2]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 #>  #> [[3]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 #>  #> [[4]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>  # a list without a dim attribute  ## --- mapply and .mapply ---  pbmapply(rep, 1:4, 4:1) #> [[1]] #> [1] 1 1 1 1 #>  #> [[2]] #> [1] 2 2 2 #>  #> [[3]] #> [1] 3 3 #>  #> [[4]] #> [1] 4 #>  pbmapply(rep, times = 1:4, x = 4:1) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] 3 3 #>  #> [[3]] #> [1] 2 2 2 #>  #> [[4]] #> [1] 1 1 1 1 #>  pbmapply(rep, times = 1:4, MoreArgs = list(x = 42)) #> [[1]] #> [1] 42 #>  #> [[2]] #> [1] 42 42 #>  #> [[3]] #> [1] 42 42 42 #>  #> [[4]] #> [1] 42 42 42 42 #>  pbmapply(function(x, y) seq_len(x) + y,        c(a =  1, b = 2, c = 3),  # names from first        c(A = 10, B = 0, C = -10)) #> $a #> [1] 11 #>  #> $b #> [1] 1 2 #>  #> $c #> [1] -9 -8 -7 #>  word <- function(C, k) paste(rep.int(C, k), collapse = \"\") utils::str(pbmapply(word, LETTERS[1:6], 6:1, SIMPLIFY = FALSE)) #> List of 6 #>  $ A: chr \"AAAAAA\" #>  $ B: chr \"BBBBB\" #>  $ C: chr \"CCCC\" #>  $ D: chr \"DDD\" #>  $ E: chr \"EE\" #>  $ F: chr \"F\"  pb.mapply(rep,           dots = list(1:4, 4:1),           MoreArgs = list()) #> [[1]] #> [1] 1 1 1 1 #>  #> [[2]] #> [1] 2 2 2 #>  #> [[3]] #> [1] 3 3 #>  #> [[4]] #> [1] 4 #>  pb.mapply(rep,           dots = list(times = 1:4, x = 4:1),           MoreArgs = list()) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] 3 3 #>  #> [[3]] #> [1] 2 2 2 #>  #> [[4]] #> [1] 1 1 1 1 #>  pb.mapply(rep,           dots = list(times = 1:4),           MoreArgs = list(x = 42)) #> [[1]] #> [1] 42 #>  #> [[2]] #> [1] 42 42 #>  #> [[3]] #> [1] 42 42 42 #>  #> [[4]] #> [1] 42 42 42 42 #>  pb.mapply(function(x, y) seq_len(x) + y,           dots = list(c(a =  1, b = 2, c = 3),  # names from first                       c(A = 10, B = 0, C = -10)),           MoreArgs = list()) #> [[1]] #> [1] 11 #>  #> [[2]] #> [1] 1 2 #>  #> [[3]] #> [1] -9 -8 -7 #>   ## --- Map ---  pbMap(`+`, 1,         1 : 3) ;         1 + 1:3 #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 4 #>  #> [1] 2 3 4  ## --- eapply ---  env <- new.env(hash = FALSE) env$a <- 1:10 env$beta <- exp(-3:3) env$logic <- c(TRUE, FALSE, FALSE, TRUE) pbeapply(env, mean) #> $logic #> [1] 0.5 #>  #> $beta #> [1] 4.535125 #>  #> $a #> [1] 5.5 #>  unlist(pbeapply(env, mean, USE.NAMES = FALSE)) #> [1] 0.500000 4.535125 5.500000 pbeapply(env, quantile, probs = 1:3/4) #> $logic #> 25% 50% 75%  #> 0.0 0.5 1.0  #>  #> $beta #>       25%       50%       75%  #> 0.2516074 1.0000000 5.0536690  #>  #> $a #>  25%  50%  75%  #> 3.25 5.50 7.75  #>  pbeapply(env, quantile) #> $logic #>   0%  25%  50%  75% 100%  #>  0.0  0.0  0.5  1.0  1.0  #>  #> $beta #>          0%         25%         50%         75%        100%  #>  0.04978707  0.25160736  1.00000000  5.05366896 20.08553692  #>  #> $a #>    0%   25%   50%   75%  100%  #>  1.00  3.25  5.50  7.75 10.00  #>   ## --- tapply ---  require(stats) groups <- as.factor(rbinom(32, n = 5, prob = 0.4)) pbtapply(groups, groups, length) #- is almost the same as #> 10 11 13 14 18  #>  1  1  1  1  1  table(groups) #> groups #> 10 11 13 14 18  #>  1  1  1  1  1   ## contingency table from data.frame : array with named dimnames pbtapply(warpbreaks$breaks, warpbreaks[,-1], sum) #>     tension #> wool   L   M   H #>    A 401 216 221 #>    B 254 259 169 pbtapply(warpbreaks$breaks, warpbreaks[, 3, drop = FALSE], sum) #> tension #>   L   M   H  #> 655 475 390   n <- 17; fac <- factor(rep_len(1:3, n), levels = 1:5) table(fac) #> fac #> 1 2 3 4 5  #> 6 6 5 0 0  pbtapply(1:n, fac, sum) #>  1  2  3  4  5  #> 51 57 45 NA NA  pbtapply(1:n, fac, sum, default = 0) # maybe more desirable #>  1  2  3  4  5  #> 51 57 45  0  0  pbtapply(1:n, fac, sum, simplify = FALSE) #> $`1` #> [1] 51 #>  #> $`2` #> [1] 57 #>  #> $`3` #> [1] 45 #>  #> $`4` #> NULL #>  #> $`5` #> NULL #>  pbtapply(1:n, fac, range) #> $`1` #> [1]  1 16 #>  #> $`2` #> [1]  2 17 #>  #> $`3` #> [1]  3 15 #>  #> $`4` #> NULL #>  #> $`5` #> NULL #>  pbtapply(1:n, fac, quantile) #> $`1` #>    0%   25%   50%   75%  100%  #>  1.00  4.75  8.50 12.25 16.00  #>  #> $`2` #>    0%   25%   50%   75%  100%  #>  2.00  5.75  9.50 13.25 17.00  #>  #> $`3` #>   0%  25%  50%  75% 100%  #>    3    6    9   12   15  #>  #> $`4` #> NULL #>  #> $`5` #> NULL #>  pbtapply(1:n, fac, length) ## NA's #>  1  2  3  4  5  #>  6  6  5 NA NA  pbtapply(1:n, fac, length, default = 0) # == table(fac) #> 1 2 3 4 5  #> 6 6 5 0 0   ## example of ... argument: find quarterly means pbtapply(presidents, cycle(presidents), mean, na.rm = TRUE) #>        1        2        3        4  #> 58.44828 56.43333 57.22222 53.07143   ind <- list(c(1, 2, 2), c(\"A\", \"A\", \"B\")) table(ind) #>      ind.2 #> ind.1 A B #>     1 1 0 #>     2 1 1 pbtapply(1:3, ind) #-> the split vector #> [1] 1 2 4 pbtapply(1:3, ind, sum) #>   A  B #> 1 1 NA #> 2 2  3  ## Some assertions (not held by all patch propsals): nq <- names(quantile(1:5)) stopifnot(   identical(pbtapply(1:3, ind), c(1L, 2L, 4L)),   identical(pbtapply(1:3, ind, sum),             matrix(c(1L, 2L, NA, 3L), 2, dimnames = list(c(\"1\", \"2\"), c(\"A\", \"B\")))),   identical(pbtapply(1:n, fac, quantile)[-1],             array(list(`2` = structure(c(2, 5.75, 9.5, 13.25, 17), .Names = nq),                  `3` = structure(c(3, 6, 9, 12, 15), .Names = nq),                  `4` = NULL, `5` = NULL), dim=4, dimnames=list(as.character(2:5)))))  ## --- by ---  pbby(warpbreaks[, 1:2], warpbreaks[,\"tension\"], summary) #> warpbreaks[, \"tension\"]: L #>      breaks      wool  #>  Min.   :14.00   A:9   #>  1st Qu.:26.00   B:9   #>  Median :29.50         #>  Mean   :36.39         #>  3rd Qu.:49.25         #>  Max.   :70.00         #> ------------------------------------------------------------  #> warpbreaks[, \"tension\"]: M #>      breaks      wool  #>  Min.   :12.00   A:9   #>  1st Qu.:18.25   B:9   #>  Median :27.00         #>  Mean   :26.39         #>  3rd Qu.:33.75         #>  Max.   :42.00         #> ------------------------------------------------------------  #> warpbreaks[, \"tension\"]: H #>      breaks      wool  #>  Min.   :10.00   A:9   #>  1st Qu.:15.25   B:9   #>  Median :20.50         #>  Mean   :21.67         #>  3rd Qu.:25.50         #>  Max.   :43.00         pbby(warpbreaks[, 1],   warpbreaks[, -1],       summary) #> wool: A #> tension: L #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   25.00   26.00   51.00   44.56   54.00   70.00  #> ------------------------------------------------------------  #> wool: B #> tension: L #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   14.00   20.00   29.00   28.22   31.00   44.00  #> ------------------------------------------------------------  #> wool: A #> tension: M #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      12      18      21      24      30      36  #> ------------------------------------------------------------  #> wool: B #> tension: M #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   16.00   21.00   28.00   28.78   39.00   42.00  #> ------------------------------------------------------------  #> wool: A #> tension: H #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   10.00   18.00   24.00   24.56   28.00   43.00  #> ------------------------------------------------------------  #> wool: B #> tension: H #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   13.00   15.00   17.00   18.78   21.00   28.00  pbby(warpbreaks, warpbreaks[,\"tension\"],    function(x) lm(breaks ~ wool, data = x)) #> warpbreaks[, \"tension\"]: L #>  #> Call: #> lm(formula = breaks ~ wool, data = x) #>  #> Coefficients: #> (Intercept)        woolB   #>       44.56       -16.33   #>  #> ------------------------------------------------------------  #> warpbreaks[, \"tension\"]: M #>  #> Call: #> lm(formula = breaks ~ wool, data = x) #>  #> Coefficients: #> (Intercept)        woolB   #>      24.000        4.778   #>  #> ------------------------------------------------------------  #> warpbreaks[, \"tension\"]: H #>  #> Call: #> lm(formula = breaks ~ wool, data = x) #>  #> Coefficients: #> (Intercept)        woolB   #>      24.556       -5.778   #>  tmp <- with(warpbreaks,             pbby(warpbreaks, tension,                function(x) lm(breaks ~ wool, data = x))) sapply(tmp, coef) #>                     L         M         H #> (Intercept)  44.55556 24.000000 24.555556 #> woolB       -16.33333  4.777778 -5.777778"},{"path":"/reference/pboptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating Progress Bar and Setting Options — pboptions","title":"Creating Progress Bar and Setting Options — pboptions","text":"Creating progress bar setting options.","code":""},{"path":"/reference/pboptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating Progress Bar and Setting Options — pboptions","text":"","code":"pboptions(...) startpb(min = 0, max = 1) setpb(pb, value) getpb(pb) closepb(pb) dopb() doshiny() pbtypes()"},{"path":"/reference/pboptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating Progress Bar and Setting Options — pboptions","text":"... Arguments tag = value form, list tagged values. tags must come parameters described . pb progress bar object created startpb. min, max Finite numeric values extremes progress bar. Must min < max. value New value progress bar.","code":""},{"path":"/reference/pboptions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating Progress Bar and Setting Options — pboptions","text":"pboptions convenient way handling options related progress bar. functions can used conveniently adding progress bar -like loops (see Examples).","code":""},{"path":"/reference/pboptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating Progress Bar and Setting Options — pboptions","text":"parameters set pboptions, former values returned invisible named list. list can passed argument pboptions restore parameter values. Tags following: type Type progress bar: timer (\"timer\"),     text (\"txt\"), Windows (\"win\"), TclTk (\"tk\"),     none (\"none\"), Shiny (\"shiny\").     Default value \"timer\" progress bar estimated remaining time     interactive mode, \"none\" otherwise.     See pbtypes() available progress bar types     depending operating system. char character (character string) form progress bar.     Default value \"+\". txt.width width text based progress bar, multiple     width char.     NA, number characters fits     getOption(\"width\").     Default value 50. gui.width width GUI based progress bar pixels:     dialogue box 40 pixels wider (plus frame).     Default value 300. style style bar, see     txtProgressBar timerProgressBar.     Default value 3. initial Initial value progress bar. Default value     0. title Character string giving window title     GUI dialogue box. Default value \"R progress bar\". label Character string giving window label     GUI dialogue box. Default value \"\". nout Integer, maximum number times progress bar updated.     default value 100. Smaller value minimizes     running time overhead related updating progress bar.     can especially important forking type parallel runs. min_time Minimum time seconds.     timerProgressBar output printed     estimated completion time higher value.     default value 0. use_lb Switch using load balancing running     parallel clusters. default value FALSE. startpb progress bar object. getpb setpb, length-one numeric vector giving previous value (invisibly setpb). return value NULL progress bar turned getOption(\"pboptions\")$type (\"none\" NULL value). dopb returns logical value progress bar shown based option getOption(\"pboptions\")$type. FALSE type progress bar \"none\" NULL. doshiny returns logical value, TRUE shiny package namespace available (.e. suggested package installed), type option set \"shiny\", shiny application running. closepb closes connection progress bar. pbtypes prints available progress bar types depending operating system (.e. \"win\" available Windows ).","code":""},{"path":"/reference/pboptions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating Progress Bar and Setting Options — pboptions","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/pboptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating Progress Bar and Setting Options — pboptions","text":"","code":"## increase sluggishness to admire the progress bar longer sluggishness <- 0.01  ## for loop fun1 <- function() {     pb <- startpb(0, 10)     on.exit(closepb(pb))     for (i in 1:10) {         Sys.sleep(sluggishness)         setpb(pb, i)     }     invisible(NULL) } ## while loop fun2 <- function() {     pb <- startpb(0, 10-1)     on.exit(closepb(pb))     i <- 1     while (i < 10) {         Sys.sleep(sluggishness)         setpb(pb, i)         i <- i + 1     }     invisible(NULL) } ## using original settings fun1() ## resetting pboptions opb <- pboptions(style = 1, char = \">\") ## check new settings getOption(\"pboptions\") #> $type #> [1] \"none\" #>  #> $char #> [1] \">\" #>  #> $txt.width #> [1] 50 #>  #> $gui.width #> [1] 300 #>  #> $style #> [1] 1 #>  #> $initial #> [1] 0 #>  #> $title #> [1] \"R progress bar\" #>  #> $label #> [1] \"\" #>  #> $nout #> [1] 100 #>  #> $min_time #> [1] 0 #>  #> $use_lb #> [1] FALSE #>  ## running again with new settings fun2() ## resetting original pboptions(opb) ## check reset getOption(\"pboptions\") #> $type #> [1] \"none\" #>  #> $char #> [1] \"+\" #>  #> $txt.width #> [1] 50 #>  #> $gui.width #> [1] 300 #>  #> $style #> [1] 3 #>  #> $initial #> [1] 0 #>  #> $title #> [1] \"R progress bar\" #>  #> $label #> [1] \"\" #>  #> $nout #> [1] 100 #>  #> $min_time #> [1] 0 #>  #> $use_lb #> [1] FALSE #>  fun1()  ## dealing with nested progress bars ## when only one the 1st one is needed f <- function(x) Sys.sleep(sluggishness) g <- function(x) pblapply(1:10, f) tmp <- lapply(1:10, g) # undesirable ## here is the desirable solution h <- function(x) {     opb <- pboptions(type=\"none\")     on.exit(pboptions(opb))     pblapply(1:10, f) } tmp <- pblapply(1:10, h)  ## list available pb types pbtypes() #> [1] \"timer\" \"txt\"   \"tk\"    \"none\"  \"shiny\""},{"path":"/reference/splitpb.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide Tasks for Progress-bar Friendly Distribution in a Cluster — splitpb","title":"Divide Tasks for Progress-bar Friendly Distribution in a Cluster — splitpb","text":"Divides 1:nx approximately equal sizes (ncl) way allocate tasks nodes cluster repeatedly updating progress bar.","code":""},{"path":"/reference/splitpb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide Tasks for Progress-bar Friendly Distribution in a Cluster — splitpb","text":"","code":"splitpb(nx, ncl, nout = NULL)"},{"path":"/reference/splitpb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide Tasks for Progress-bar Friendly Distribution in a Cluster — splitpb","text":"nx Number tasks. ncl Number cluster nodes. nout Integer, maximum number partitions output (must > 0).","code":""},{"path":"/reference/splitpb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divide Tasks for Progress-bar Friendly Distribution in a Cluster — splitpb","text":"list length min(nout, ceiling(nx / ncl)), element integer vector length ncl * k less, k tuning parameter constrained arguments (k = max(1L, ceiling(ceiling(nx / ncl) / nout)) k = 1 nout = NULL).","code":""},{"path":"/reference/splitpb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Divide Tasks for Progress-bar Friendly Distribution in a Cluster — splitpb","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/splitpb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide Tasks for Progress-bar Friendly Distribution in a Cluster — splitpb","text":"","code":"## define 1 job / worker at a time and repeat splitpb(10, 4) #> [[1]] #> [1] 1 2 3 4 #>  #> [[2]] #> [1] 5 6 7 8 #>  #> [[3]] #> [1]  9 10 #>  ## compare this to the no-progress-bar split ## that defines all the jubs / worker up front parallel::splitIndices(10, 4) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 4 5 #>  #> [[3]] #> [1] 6 7 #>  #> [[4]] #> [1]  8  9 10 #>   ## cap the length of the output splitpb(20, 2, nout = NULL) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 3 4 #>  #> [[3]] #> [1] 5 6 #>  #> [[4]] #> [1] 7 8 #>  #> [[5]] #> [1]  9 10 #>  #> [[6]] #> [1] 11 12 #>  #> [[7]] #> [1] 13 14 #>  #> [[8]] #> [1] 15 16 #>  #> [[9]] #> [1] 17 18 #>  #> [[10]] #> [1] 19 20 #>  splitpb(20, 2, nout = 5) #> [[1]] #> [1] 1 2 3 4 #>  #> [[2]] #> [1] 5 6 7 8 #>  #> [[3]] #> [1]  9 10 11 12 #>  #> [[4]] #> [1] 13 14 15 16 #>  #> [[5]] #> [1] 17 18 19 20 #>"},{"path":"/reference/timerProgressBar.html","id":null,"dir":"Reference","previous_headings":"","what":"Timer Progress Bar — timerProgressBar","title":"Timer Progress Bar — timerProgressBar","text":"Text progress bar timer R console.","code":""},{"path":"/reference/timerProgressBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Timer Progress Bar — timerProgressBar","text":"","code":"timerProgressBar(min = 0, max = 1, initial = 0, char = \"=\",     width = NA, title, label, style = 1, file = \"\", min_time = 0) getTimerProgressBar(pb) setTimerProgressBar(pb, value, title = NULL, label = NULL) getTimeAsString(time)"},{"path":"/reference/timerProgressBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Timer Progress Bar — timerProgressBar","text":"min, max (finite) numeric values extremes progress bar. Must min < max. initial, value initial new value progress bar. See Details happens invalid values. char character (character string) form progress bar. number characters >1, silently stripped length 1 unless style 5 6 (see Details). width width progress bar, multiple width char. NA, default, number characters fits getOption(\"width\"). style style taking values 1 6. 1: progress bar elapsed remaining time, remaining percentage indicated spaces pipes (default function), 2: throbber elapsed remaining time, 3: progress bar remaining time printing elapsed time end, remaining percentage indicated spaces pipes (default style option pboptions), 4: throbber remaining time printing elapsed time end, 5: progress bar elapsed remaining time flexible styling (see Details Examples), 6: progress bar remaining time printing elapsed time end flexible styling (see Details Examples). file open connection object \"\" indicates console. min_time numeric, minimum processing time (seconds) required show progress bar. pb object class \"timerProgressBar\". title, label ignored, compatibility progress bars. time numeric length 1, time seconds.","code":""},{"path":"/reference/timerProgressBar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Timer Progress Bar — timerProgressBar","text":"timerProgressBar display progress bar R console (connection) via text representation. setTimerProgessBar update value. Missing (NA) --range values value (silently) ignored. (values initial cause progress bar displayed valid value set.) progress bar closed finished : outputs final newline character (see closepb). style 5 6, possible define 4 characters char argument (single string) left end, elapsed portion, remaining portion, right end progress bar (|= | default). Remaining portion elapsed portion (space used remaining cases). 1 character defined, taken elapsed portion. 2-4 characters defined, interpreted sequence (left right end 2-3 characters defined), see Examples. getTimeAsString converts time seconds ~HHh MMm SSs format printed timerProgressBar.","code":""},{"path":"/reference/timerProgressBar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Timer Progress Bar — timerProgressBar","text":"timerProgressBar object class \"timerProgressBar\" inheriting \"txtProgressBar\". getTimerProgressBar setTimerProgressBar, length-one numeric vector giving previous value (invisibly setTimerProgressBar). getTimeAsString returns time ~HHh MMm SSs format character. Returns \"calculating\" time=NULL.","code":""},{"path":"/reference/timerProgressBar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Timer Progress Bar — timerProgressBar","text":"Zygmunt Zawadzki <zawadzkizygmunt@gmail.com> Peter Solymos <solymos@ualberta.ca>","code":""},{"path":[]},{"path":"/reference/timerProgressBar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Timer Progress Bar — timerProgressBar","text":"","code":"## increase sluggishness to admire the progress bar longer sluggishness <- 0.02  test_fun <- function(...) {     pb <- timerProgressBar(...)     on.exit(close(pb))     for (i in seq(0, 1, 0.05)) {         Sys.sleep(sluggishness)         setTimerProgressBar(pb, i)     }     invisible(NULL) }  ## check the different styles test_fun(width = 35, char = \"+\", style = 1) #>    |                                   | 0 % elapsed=00s      |                                   | 0 % elapsed=00s      |++                                 | 5 % elapsed=00s, remaining~02s   |++++                               | 10% elapsed=00s, remaining~02s   |++++++                             | 15% elapsed=00s, remaining~01s   |+++++++                            | 20% elapsed=00s, remaining~01s   |+++++++++                          | 25% elapsed=00s, remaining~01s   |+++++++++++                        | 30% elapsed=00s, remaining~01s   |+++++++++++++                      | 35% elapsed=00s, remaining~01s   |++++++++++++++                     | 40% elapsed=01s, remaining~01s   |++++++++++++++++                   | 45% elapsed=01s, remaining~01s   |++++++++++++++++++                 | 50% elapsed=01s, remaining~01s   |++++++++++++++++++++               | 55% elapsed=01s, remaining~01s   |++++++++++++++++++++++             | 60% elapsed=01s, remaining~01s   |+++++++++++++++++++++++            | 65% elapsed=01s, remaining~00s   |+++++++++++++++++++++++++          | 70% elapsed=01s, remaining~00s   |+++++++++++++++++++++++++++        | 75% elapsed=01s, remaining~00s   |++++++++++++++++++++++++++++       | 80% elapsed=01s, remaining~00s   |++++++++++++++++++++++++++++++     | 85% elapsed=01s, remaining~00s   |++++++++++++++++++++++++++++++++   | 90% elapsed=01s, remaining~00s   |++++++++++++++++++++++++++++++++++ | 95% elapsed=01s, remaining~00s   |+++++++++++++++++++++++++++++++++++| 100% elapsed=01s, remaining~00s test_fun(style = 2) #>   / 0 % elapsed=00s     / 0 % elapsed=00s     - 5 % elapsed=00s, remaining~01s  \\ 10% elapsed=00s, remaining~01s  | 15% elapsed=00s, remaining~01s  / 20% elapsed=00s, remaining~01s  - 25% elapsed=00s, remaining~01s  \\ 30% elapsed=00s, remaining~01s  | 35% elapsed=00s, remaining~01s  / 40% elapsed=01s, remaining~01s  - 45% elapsed=01s, remaining~01s  \\ 50% elapsed=01s, remaining~01s  | 55% elapsed=01s, remaining~01s  / 60% elapsed=01s, remaining~00s  - 65% elapsed=01s, remaining~00s  \\ 70% elapsed=01s, remaining~00s  | 75% elapsed=01s, remaining~00s  / 80% elapsed=01s, remaining~00s  - 85% elapsed=01s, remaining~00s  \\ 90% elapsed=01s, remaining~00s  | 95% elapsed=01s, remaining~00s  / 100% elapsed=01s, remaining~00s test_fun(width = 50, char = \".\", style = 3) #>    |                                                  | 0 % ~calculating     |                                                  | 0 % ~calculating     |...                                               | 5 % ~02s             |.....                                             | 10% ~02s             |........                                          | 15% ~02s             |..........                                        | 20% ~02s             |.............                                     | 25% ~01s             |................                                  | 30% ~01s             |..................                                | 35% ~01s             |....................                              | 40% ~01s             |.......................                           | 45% ~01s             |.........................                         | 50% ~01s             |............................                      | 55% ~01s             |...............................                   | 60% ~01s             |.................................                 | 65% ~00s             |...................................               | 70% ~00s             |......................................            | 75% ~00s             |........................................          | 80% ~00s             |...........................................       | 85% ~00s             |.............................................     | 90% ~00s             |................................................  | 95% ~00s             |..................................................| 100% elapsed=01s   test_fun(style = 4) #>   / 0 % ~calculating    / 0 % ~calculating    - 5 % ~02s            \\ 10% ~02s            | 15% ~01s            / 20% ~01s            - 25% ~01s            \\ 30% ~01s            | 35% ~01s            / 40% ~01s            - 45% ~01s            \\ 50% ~01s            | 55% ~01s            / 60% ~01s            - 65% ~00s            \\ 70% ~00s            | 75% ~00s            / 80% ~00s            - 85% ~00s            \\ 90% ~00s            | 95% ~00s            / 100% elapsed=01s   test_fun(width = 35, char = \"[=-]\", style = 5) #>    [-----------------------------------] 0 % elapsed=00s      [-----------------------------------] 0 % elapsed=00s      [==---------------------------------] 5 % elapsed=00s, remaining~03s   [====-------------------------------] 10% elapsed=00s, remaining~02s   [======-----------------------------] 15% elapsed=00s, remaining~02s   [=======----------------------------] 20% elapsed=00s, remaining~02s   [=========--------------------------] 25% elapsed=00s, remaining~01s   [===========------------------------] 30% elapsed=00s, remaining~01s   [=============----------------------] 35% elapsed=01s, remaining~01s   [==============---------------------] 40% elapsed=01s, remaining~01s   [================-------------------] 45% elapsed=01s, remaining~01s   [==================-----------------] 50% elapsed=01s, remaining~01s   [====================---------------] 55% elapsed=01s, remaining~01s   [======================-------------] 60% elapsed=01s, remaining~01s   [=======================------------] 65% elapsed=01s, remaining~00s   [=========================----------] 70% elapsed=01s, remaining~00s   [===========================--------] 75% elapsed=01s, remaining~00s   [============================-------] 80% elapsed=01s, remaining~00s   [==============================-----] 85% elapsed=01s, remaining~00s   [================================---] 90% elapsed=01s, remaining~00s   [==================================-] 95% elapsed=01s, remaining~00s   [===================================] 100% elapsed=01s, remaining~00s test_fun(width = 50, char = \"{*.}\", style = 6) #>    {..................................................} 0 % ~calculating     {..................................................} 0 % ~calculating     {***...............................................} 5 % ~01s             {*****.............................................} 10% ~01s             {********..........................................} 15% ~00s             {**********........................................} 20% ~00s             {*************.....................................} 25% ~00s             {****************..................................} 30% ~00s             {******************................................} 35% ~00s             {********************..............................} 40% ~00s             {***********************...........................} 45% ~00s             {*************************.........................} 50% ~00s             {****************************......................} 55% ~00s             {*******************************...................} 60% ~00s             {*********************************.................} 65% ~00s             {***********************************...............} 70% ~00s             {**************************************............} 75% ~00s             {****************************************..........} 80% ~00s             {*******************************************.......} 85% ~00s             {*********************************************.....} 90% ~00s             {************************************************..} 95% ~00s             {**************************************************} 100% elapsed=01s    ## no bar only percent and elapsed test_fun(width = 0, char = \"    \", style = 6) #>    0 % ~calculating     0 % ~calculating     5 % ~02s             10% ~01s             15% ~01s             20% ~01s             25% ~01s             30% ~01s             35% ~01s             40% ~01s             45% ~01s             50% ~01s             55% ~01s             60% ~01s             65% ~00s             70% ~00s             75% ~00s             80% ~00s             85% ~00s             90% ~00s             95% ~00s             100% elapsed=01s    ## this should produce a progress bar based on min_time (elapsed <- system.time(test_fun(width = 35, min_time = 0))[\"elapsed\"]) #>    |                                   | 0 % elapsed=00s      |                                   | 0 % elapsed=00s      |==                                 | 5 % elapsed=00s, remaining~03s   |====                               | 10% elapsed=00s, remaining~02s   |======                             | 15% elapsed=00s, remaining~02s   |=======                            | 20% elapsed=00s, remaining~01s   |=========                          | 25% elapsed=00s, remaining~01s   |===========                        | 30% elapsed=00s, remaining~01s   |=============                      | 35% elapsed=00s, remaining~01s   |==============                     | 40% elapsed=01s, remaining~01s   |================                   | 45% elapsed=01s, remaining~01s   |==================                 | 50% elapsed=01s, remaining~01s   |====================               | 55% elapsed=01s, remaining~01s   |======================             | 60% elapsed=01s, remaining~01s   |=======================            | 65% elapsed=01s, remaining~01s   |=========================          | 70% elapsed=01s, remaining~00s   |===========================        | 75% elapsed=01s, remaining~00s   |============================       | 80% elapsed=01s, remaining~00s   |==============================     | 85% elapsed=01s, remaining~00s   |================================   | 90% elapsed=01s, remaining~00s   |================================== | 95% elapsed=01s, remaining~00s   |===================================| 100% elapsed=01s, remaining~00s #> elapsed  #>    1.39  ## this should not produce a progress bar based on min_time system.time(test_fun(min_time = 2 * elapsed))[\"elapsed\"] #> elapsed  #>   1.349   ## time formatting getTimeAsString(NULL) #> [1] \"calculating\" getTimeAsString(15) #> [1] \"15s\" getTimeAsString(65) #> [1] \"01m 05s\" getTimeAsString(6005) #> [1] \"01h 40m 05s\"  ## example usage of getTimeAsString, use sluggishness <- 1 n <- 10 t0 <- proc.time()[3] ETA <- NULL for (i in seq_len(n)) {     cat(i, \"/\", n, \"- ETA:\", getTimeAsString(ETA))     flush.console()     Sys.sleep(sluggishness)     dt <- proc.time()[3] - t0     cat(\" - elapsed:\", getTimeAsString(dt), \"\\n\")     ETA <- (n - i) * dt / i } #> 1 / 10 - ETA: calculating - elapsed: 00s  #> 2 / 10 - ETA: 01s - elapsed: 00s  #> 3 / 10 - ETA: 01s - elapsed: 00s  #> 4 / 10 - ETA: 00s - elapsed: 00s  #> 5 / 10 - ETA: 00s - elapsed: 00s  #> 6 / 10 - ETA: 00s - elapsed: 00s  #> 7 / 10 - ETA: 00s - elapsed: 00s  #> 8 / 10 - ETA: 00s - elapsed: 00s  #> 9 / 10 - ETA: 00s - elapsed: 01s  #> 10 / 10 - ETA: 00s - elapsed: 01s"},{"path":"/news/index.html","id":"version-17-0-jan-12-2023","dir":"Changelog","previous_headings":"","what":"Version 1.7-0, Jan 12, 2023","title":"Version 1.7-0, Jan 12, 2023","text":"New functions: pbeapply, pbvapply, pbby, pbMap (#50, #51, #52, #53). Added support future backends (#54), future future.apply packages now Suggested. Henrik Bengtsson (@HenrikBengtsson) R Core Team added contributors. NEWS.md file excluded package tarball (#58). pbapply performance issue (#62) addressed. License package now GPL (>=2) (#61).","code":""},{"path":"/news/index.html","id":"version-16-0-nov-13-2022","dir":"Changelog","previous_headings":"","what":"Version 1.6-0, Nov 13, 2022","title":"Version 1.6-0, Nov 13, 2022","text":"CRAN release: 2022-11-16 New function pbwalk can called side-effects (#48).","code":""},{"path":"/news/index.html","id":"version-15-0-sept-15-2021","dir":"Changelog","previous_headings":"","what":"Version 1.5-0, Sept 15, 2021","title":"Version 1.5-0, Sept 15, 2021","text":"CRAN release: 2021-09-16 New progress bar type \"shiny\" show progress bar Shiny UI. Following R changes apply, fixing dimnames issue (#44).","code":""},{"path":"/news/index.html","id":"version-14-3-august-11-2020","dir":"Changelog","previous_headings":"","what":"Version 1.4-3, August 11, 2020","title":"Version 1.4-3, August 11, 2020","text":"CRAN release: 2020-08-18 Following R 3.6.2 changes apply (#41). Adding pbtapply (#21).","code":""},{"path":"/news/index.html","id":"version-14-2-august-30-2019","dir":"Changelog","previous_headings":"","what":"Version 1.4-2, August 30, 2019","title":"Version 1.4-2, August 30, 2019","text":"CRAN release: 2019-08-31 Fixed environment issue inside tracer pbmapply non-interactive session (issue #39). came package suggesting pbapply, reported @Nowosad.","code":""},{"path":"/news/index.html","id":"version-14-1-july-14-2019","dir":"Changelog","previous_headings":"","what":"Version 1.4-1, July 14, 2019","title":"Version 1.4-1, July 14, 2019","text":"CRAN release: 2019-07-15 Use base::strrep instead paste(rep(), collapse='') timerProgressBar. Fixed space printing glitch (due rounding), causing issue #37.","code":""},{"path":"/news/index.html","id":"version-14-0-february-5-2019","dir":"Changelog","previous_headings":"","what":"Version 1.4-0, February 5, 2019","title":"Version 1.4-0, February 5, 2019","text":"CRAN release: 2019-02-05 pblapply returns empty list empty vector consistent lapply behavior (#33 @kendonB); tests also added. pbmapply function added (#29) without parallel option.","code":""},{"path":"/news/index.html","id":"version-13-4-january-9-2018","dir":"Changelog","previous_headings":"","what":"Version 1.3-4, January 9, 2018","title":"Version 1.3-4, January 9, 2018","text":"CRAN release: 2018-01-10 New function pbtypes() print available pb types depending OS. getTimeAsString now exported, description examples. New pboption use_lb switch load balancing parallel clusters, FALSE default (feature request #28).","code":""},{"path":"/news/index.html","id":"version-13-3-july-3-2017","dir":"Changelog","previous_headings":"","what":"Version 1.3-3, July 3, 2017","title":"Version 1.3-3, July 3, 2017","text":"CRAN release: 2017-07-04 Bar show start. happen waiting calculate total time compare min_time option. Bar shown right away min_time=0 (issue #18). pbapply gained cl argument consistent parallelized functions progress bar (issue #24).","code":""},{"path":"/news/index.html","id":"version-13-2-february-28-2017","dir":"Changelog","previous_headings":"","what":"Version 1.3-2, February 28, 2017","title":"Version 1.3-2, February 28, 2017","text":"CRAN release: 2017-03-01 timerProgressBar makes sure char argument empty (\"\" replaced default \"=\"). Progress bar shown interactive() && .null(getOption(\"knitr..progress\")) avoid printing progress bar interactive knitr rendering (request #15 Sergio Oller). Bugfix: functions failed single cluster cl argument (issue #17).","code":""},{"path":"/news/index.html","id":"version-13-1-october-30-2016","dir":"Changelog","previous_headings":"","what":"Version 1.3-1, October 30, 2016","title":"Version 1.3-1, October 30, 2016","text":"CRAN release: 2016-10-31 timerProgressBar gained 2 new styles flexible styling including left/right end elapsed/remaining components progress bar. timerProgressBar gained min_time argument minimum processing time (seconds) required show progress bar. global min_time can set via pboptions.","code":""},{"path":"/news/index.html","id":"version-13-0-september-25-2016","dir":"Changelog","previous_headings":"","what":"Version 1.3-0, September 25, 2016","title":"Version 1.3-0, September 25, 2016","text":"CRAN release: 2016-09-26 Progress bar added parallel (cluster forking) jobs (request #9 Kendon Bell). Package parallel now imported result. timerProgressBar prints days job expected >24h (PR #11 Phil Chalmers).","code":""},{"path":"/news/index.html","id":"version-12-2-august-25-2016","dir":"Changelog","previous_headings":"","what":"Version 1.2-2, August 25, 2016","title":"Version 1.2-2, August 25, 2016","text":"CRAN release: 2016-08-26 Stylistic changes printed messages. Default pb type 'none' !interactive().","code":""},{"path":"/news/index.html","id":"version-12-1-march-2-2016","dir":"Changelog","previous_headings":"","what":"Version 1.2-1, March 2, 2016","title":"Version 1.2-1, March 2, 2016","text":"CRAN release: 2016-04-19 Double tilde ~ timerProgressBar cleaned (~~calculating). timerProgressBar gained 4 styles documented help page. Showing elapsed remaining time, throbber bar formats.","code":""},{"path":"/news/index.html","id":"version-12-0-feb-29-2016","dir":"Changelog","previous_headings":"","what":"Version 1.2-0, Feb 29, 2016","title":"Version 1.2-0, Feb 29, 2016","text":"CRAN release: 2016-03-01 New function: timerProgressBar written Zygmunt Zawadzki. Zygmunt added package author.","code":""},{"path":"/news/index.html","id":"version-11-3-nov-24-2015","dir":"Changelog","previous_headings":"","what":"Version 1.1-3, Nov 24, 2015","title":"Version 1.1-3, Nov 24, 2015","text":"CRAN release: 2015-11-24 R (>= 3.2.0) dependency added check failed R-oldrelease (R-3.1.3) error 'find function \"forceAndCall\"' part apply function source code. Reported Uwe Ligges.","code":""},{"path":"/news/index.html","id":"version-11-2-nov-21-2015","dir":"Changelog","previous_headings":"","what":"Version 1.1-2, Nov 21, 2015","title":"Version 1.1-2, Nov 21, 2015","text":"CRAN release: 2015-11-22 Using .exit invisible(NULL) examples. pblapply return NULL values, reported J. Barrett, now fixed. pblapply return list names, now fixed. pbapply, pbsapply, pbreplicate: code follows base original. Examples updated follow base R examples. Rd file updated match code changes.","code":""},{"path":"/news/index.html","id":"version-11-1-feb-3-2014","dir":"Changelog","previous_headings":"","what":"Version 1.1-1, Feb 3, 2014","title":"Version 1.1-1, Feb 3, 2014","text":"CRAN release: 2014-05-16 pblapply pass ... interactive mode. Bug reported R. D. Morey (U Groningen).","code":""},{"path":"/news/index.html","id":"version-11-0-sept-25-2013","dir":"Changelog","previous_headings":"","what":"Version 1.1-0, Sept 25, 2013","title":"Version 1.1-0, Sept 25, 2013","text":"CRAN release: 2013-10-03 Removed ::: satisfy R 3.0.2 checks.","code":""},{"path":"/news/index.html","id":"version-10-5-july-6-2012","dir":"Changelog","previous_headings":"","what":"Version 1.0-5, July 6, 2012","title":"Version 1.0-5, July 6, 2012","text":"CRAN release: 2012-07-07 inst/COPYING removed. .Internal call removed pblapply.","code":""},{"path":"/news/index.html","id":"version-10-4-september-8-2011","dir":"Changelog","previous_headings":"","what":"Version 1.0-4, September 8, 2011","title":"Version 1.0-4, September 8, 2011","text":"CRAN release: 2011-10-24 .onLoad added zzz.R Help files bit reworked.","code":""},{"path":"/news/index.html","id":"version-10-3-september-9-2010","dir":"Changelog","previous_headings":"","what":"Version 1.0-3, September 9, 2010","title":"Version 1.0-3, September 9, 2010","text":"CRAN release: 2011-02-09 pboptions.Rd modified: pb type values added.","code":""},{"path":"/news/index.html","id":"version-10-2-september-4-2010","dir":"Changelog","previous_headings":"","what":"Version 1.0-2, September 4, 2010","title":"Version 1.0-2, September 4, 2010","text":"CRAN release: 2010-09-10 pboptions function reworked. Functions simplified.","code":""},{"path":"/news/index.html","id":"version-10-1-september-3-2010","dir":"Changelog","previous_headings":"","what":"Version 1.0-1, September 3, 2010","title":"Version 1.0-1, September 3, 2010","text":"CRAN release: 2010-09-03 pbreplicate added. /tests directory created. R CMD check failed unix systems: /man /R directories reworked.","code":""},{"path":"/news/index.html","id":"version-10-0-september-2-2010","dir":"Changelog","previous_headings":"","what":"Version 1.0-0, September 2, 2010","title":"Version 1.0-0, September 2, 2010","text":"First release.","code":""}]
